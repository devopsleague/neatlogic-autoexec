<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.module.autoexec.dao.mapper.AutoexecScriptMapper">

    <select id="getScriptBaseInfoById" parameterType="java.lang.Long" resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        select
        `id`,
        `name`,
        `uk`,
        `exec_mode` as execMode,
        `type_id` as typeId,
        `risk_id` as riskId,
        (select `name` from `autoexec_type` where a.`type_id` = `id`) as type,
        (select `name` from `autoexec_risk` where a.`risk_id` = `id`) as risk,
        `fcu`,
        `fcd`
        from `autoexec_script` a
        where `id` = #{value}
    </select>

    <select id="checkScriptIsExistsById" parameterType="java.lang.Long" resultType="int">
        select `id`
        from `autoexec_script` where `id` = #{value}
    </select>

    <select id="checkScriptNameIsExists" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo"
            resultType="int">
        select count(`id`) from `autoexec_script` where `name` = #{name} and `id` != #{id}
    </select>

    <select id="checkScriptUkIsExists" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo"
            resultType="int">
        select count(`id`) from `autoexec_script` where `uk` = #{uk} and `id` != #{id}
    </select>

    <select id="checkScriptLineContentHashIsExists" parameterType="java.lang.String" resultType="int">
        select count(`hash`)
        from `autoexec_script_line_content`
        where `hash` = #{value}
    </select>

    <select id="getVersionByVersionId" parameterType="java.lang.Long" resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select
        `id`,
        `script_id` as scriptId,
        `version`,
        `parser`,
        `status`,
        `reviewer`,
        `is_active` as isActive,
        `config`,
        `lcu`,
        `lcd`
        from `autoexec_script_version`
        where `id` = #{value}
    </select>

    <select id="getMaxVersionByScriptId" parameterType="java.lang.Long" resultType="int">
        select
        max(`version`)
        from `autoexec_script_version`
        where `script_id` = #{value}
    </select>
    
    <select id="getVersionCountByScriptId" parameterType="java.lang.Long" resultType="int">
        select
        count(`id`)
        from `autoexec_script_version`
        where `script_id` = #{value}
    </select>

    <resultMap id="scriptVersionMap" type="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        <result column="id" property="id"/>
        <result column="version" property="version"/>
        <result column="status" property="status"/>
        <result column="reviewer" property="reviewer"/>
        <result column="isActive" property="isActive"/>
        <result column="lcd" property="lcd"/>
        <association property="lcuVo" javaType="codedriver.framework.dto.UserVo">
            <result property="uuid" column="lcu"/>
            <result property="userName" column="userName"/>
        </association>
    </resultMap>

    <select id="getVersionList" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo" resultMap="scriptVersionMap">
        select
        `id`,
        `version`,
        `status`,
        `reviewer`,
        `is_active` as isActive,
        `lcu`,
        (select `user_name` from `user` where `uuid` = `lcu`) as userName,
        `lcd`
        from `autoexec_script_version`
        where `script_id` = #{scriptId}
        order by `id` desc
        <if test="needPage == true">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getActiveVersionByScriptId" parameterType="java.lang.Long" resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select
        `id`,
        `script_id` as scriptId,
        `version`,
        `parser`,
        `status`,
        `reviewer`,
        `is_active` as isActive,
        `lcd`,
        `lcu`
        from `autoexec_script_version`
        where `script_id` = #{value}
        and `is_active` = 1
    </select>

    <select id="getLatestVersionByScriptId" parameterType="java.lang.Long" resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select
        `id`,
        `script_id` as scriptId,
        `version`,
        `parser`,
        `status`,
        `reviewer`,
        `is_active` as isActive,
        `lcd`,
        `lcu`
        from `autoexec_script_version`
        where `script_id` = #{value}
        order by `id` desc
        limit 1
    </select>

    <select id="getParamListByVersionId" parameterType="java.lang.Long" resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionParamVo">
        select
        `script_version_id` as scriptVersionId,
        `key`,
        `default_value` as defaultValue,
        `type`,
        `handler`,
        `is_required` as isRequired,
        `description`
        from `autoexec_script_version_param`
        where `script_version_id` = #{value}
    </select>

    <select id="getLineListByVersionId" parameterType="java.lang.Long" resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptLineVo">
        select
        a.`id`,
        a.`script_id` as scriptId,
        a.`script_version_id` as scriptVersionId,
        a.`content_hash` as contentHash,
        a.`line_number` as lineNumber,
        b.`content`
        from `autoexec_script_line` a
        left join `autoexec_script_line_content` b
        on a.`content_hash` = b.`hash`
        where a.`script_version_id` = #{value}
        order by a.`line_number`
    </select>

    <sql id="searchScriptCondition">
        <where>
            <if test="keyword != null and keyword != ''">
                and (`name` like CONCAT('%', #{keyword}, '%') or `uk` like CONCAT('%', #{keyword}, '%'))
            </if>
            <if test="execMode != null and execMode != ''">
                and `exec_mode` = #{execMode}
            </if>
            <if test="typeId != null">
                and `type_id` = #{typeId}
            </if>
            <if test="riskId != null">
                and `risk_id` = #{riskId}
            </if>
            <if test="isReviewing == 1">
                and `status` = 'submitted'
            </if>
        </where>
    </sql>

    <select id="searchScriptCount" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo" resultType="int">
        select
        count(`id`)
        from `autoexec_script`
        <include refid="searchScriptCondition"/>
    </select>

    <select id="searchScript" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        select
        `id`,
        `name`,
        `uk`,
        `exec_mode` as execMode,
        (select `name` from `autoexec_type` where a.`type_id` = `id`) as type,
        (select `name` from `autoexec_risk` where a.`risk_id` = `id`) as risk,
        (select `color` from `autoexec_risk` where a.`risk_id` = `id`) as riskColor,
        (select `version` from `autoexec_script_version` where a.`id` = `script_id` and `is_active` = 1)
        as currentVersion,
        (select count(`id`) from `autoexec_script_version` where a.`id` = `script_id`) as versionCount,
        (select count(`id`) from `autoexec_script_version` where a.`id` = `script_id` and `status` = 'submitted')
        as submittedVersionCount,
        (select count(`id`) from `autoexec_script_version` where a.`id` = `script_id` and `status` = 'passed')
        as passedVersionCount
        from `autoexec_script` a
        <include refid="searchScriptCondition"/>
        order by `id` desc
        <if test="needPage == true">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <sql id="searchToolAndScriptConditionForTool">
        from
        `autoexec_tool`
        where `is_active` = 1
        <if test="keyword != null and keyword != ''">
            and (`name` like CONCAT('%', #{keyword}, '%') or `uk` like CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="execMode != null and execMode != ''">
            and `exec_mode` = #{execMode}
        </if>
        <if test="toolTypeIdList != null and toolTypeIdList.size() != 0">
            and `type_id` in
            <foreach collection="toolTypeIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="riskIdList != null and riskIdList.size() != 0">
            and `risk_id` in
            <foreach collection="riskIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </sql>

    <sql id="searchToolAndScriptConditionForScript">
        from
        `autoexec_script` a
        join `autoexec_script_version` b
        on a.`id` = b.`script_id`
        where b.`is_active` = 1
        <if test="keyword != null and keyword != ''">
            and (a.`name` like CONCAT('%', #{keyword}, '%') or a.`uk` like CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="execMode != null and execMode != ''">
            and a.`exec_mode` = #{execMode}
        </if>
        <if test="typeId != null">
            and a.`type_id` = #{typeId}
        </if>
        <if test="riskIdList != null and riskIdList.size() != 0">
            and a.`risk_id` in
            <foreach collection="riskIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        group by a.`id`
    </sql>

    <select id="searchScriptAndToolCount" parameterType="codedriver.framework.autoexec.dto.AutoexecToolAndScriptVo" resultType="int">
        select
        count(1)
        from
        (
          <if test="(type == null or type == '') or (type != null and type != '' and type == 'tool')">
              select
              `id`
              <include refid="searchToolAndScriptConditionForTool"/>
          </if>
          <if test="type == null or type == ''">
              union
          </if>
          <if test="(type == null or type == '') or (type != null and type != '' and type == 'script')">
              select
              a.`id`
              <include refid="searchToolAndScriptConditionForScript"/>
          </if>
        ) a
    </select>

    <select id="searchScriptAndTool" parameterType="codedriver.framework.autoexec.dto.AutoexecToolAndScriptVo" resultType="codedriver.framework.autoexec.dto.AutoexecToolAndScriptVo">
        select
        a.`id`,
        a.`uk`,
        a.`name`,
        a.`type`,
        a.`execMode`,
        a.`typeId`,
        a.`typeName`,
        a.`riskId`,
        a.`riskName`,
        a.`riskColor`
        from
        (
        <if test="(type == null or type == '') or (type != null and type != '' and type == 'tool')">
            select
            `id`,
            `uk`,
            `name`,
            'tool' as `type`,
            `exec_mode` as execMode,
            `type_id` as typeId,
            (select `name` from `autoexec_type` where `id` = `type_id`) as typeName,
            `risk_id` as riskId,
            (select `name` from `autoexec_risk` where `id` = `risk_id`) as riskName,
            (select `color` from `autoexec_risk` where `id` = `risk_id`) as riskColor
            <include refid="searchToolAndScriptConditionForTool"/>
        </if>
        <if test="type == null or type == ''">
            union
        </if>
        <if test="(type == null or type == '') or (type != null and type != '' and type == 'script')">
            select
            a.`id`,
            `uk`,
            `name`,
            'script' as `type`,
            `exec_mode` as execMode,
            `type_id` as typeId,
            (select `name` from `autoexec_type` where `id` = `type_id`) as typeName,
            `risk_id` as riskId,
            (select `name` from `autoexec_risk` where `id` = `risk_id`) as riskName,
            (select `color` from `autoexec_risk` where `id` = `risk_id`) as riskColor
            <include refid="searchToolAndScriptConditionForScript"/>
        </if>
        ) a
        order by a.`name`
        <if test="needPage == true">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <sql id="getScriptReference">
        from `autoexec_combop` a
        join `autoexec_combop_phase` b
        on a.`id` = b.`combop_id`
        join `autoexec_combop_phase_operation` c
        on b.`id` = c.`combop_phase_id`
        where c.`operation_id` = #{value}
        and c.`operation_type` = 'script'
    </sql>

    <select id="getReferenceCountByScriptId" parameterType="java.lang.Long" resultType="int">
        select
        count(a.`id`)
        <include refid="getScriptReference"/>
    </select>

    <select id="getReferenceListByScriptId" parameterType="java.lang.Long" resultType="codedriver.framework.autoexec.dto.combop.AutoexecCombopVo">
        select
        a.`id`,
        a.`uk`,
        a.`name`
        <include refid="getScriptReference"/>
    </select>

    <select id="getOutputParamListByScriptIdList" parameterType="java.util.List" resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionParamVo">
        select
        a.`script_version_id` as scriptVersionId,
        a.`key`,
        a.`default_value` as defaultValue,
        a.`type`,
        a.`handler`
        from `autoexec_script_version_param` a
        join `autoexec_script_version` b
        on a.`script_version_id` = b.`id`
        where
        b.`is_active` = 1 and a.`type` = 'output'
        and b.`script_id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        group by a.`script_version_id`,a.`key`
    </select>

    <update id="updateScriptBaseInfo" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        update `autoexec_script` set
        `name` = #{name},
        `uk` = #{uk},
        `exec_mode` = #{execMode},
        `type_id` = #{typeId},
        `risk_id` = #{riskId}
        where `id` = #{id}
    </update>

    <update id="updateScriptVersion" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        update `autoexec_script_version` set
        `parser` = #{parser},
        `status` = #{status},
        `lcu` = #{lcu},
        `lcd` = now(3)
        where `id` = #{id}
    </update>

    <insert id="insertScript" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        insert into `autoexec_script` (
        `id`,
        `name`,
        `uk`,
        `type_id`,
        `risk_id`,
        `exec_mode`,
        `fcu`,
        `fcd`
        )values (
        #{id},
        #{name},
        #{uk},
        #{typeId},
        #{riskId},
        #{execMode},
        #{fcu},
        now(3)
        )
    </insert>

    <insert id="insertScriptVersion" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        insert into `autoexec_script_version` (
        `id`,
        `script_id`,
        `version`,
        `parser`,
        `status`,
        `is_active`,
        `lcu`,
        `lcd`
        )values (
        #{id},
        #{scriptId},
        #{version},
        #{parser},
        #{status},
        #{isActive},
        #{lcu},
        now(3)
        )
    </insert>

    <insert id="insertScriptVersionParamList" parameterType="java.util.List">
        insert into `autoexec_script_version_param` (
        `script_version_id`,
        `key`,
        `default_value`,
        `type`,
        `handler`,
        `is_required`,
        `description`
        ) values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.scriptVersionId},
            #{item.key},
            #{item.defaultValue},
            #{item.type},
            #{item.handler},
            #{item.isRequired},
            #{item.description}
            )
        </foreach>
    </insert>

    <insert id="insertScriptLineList" parameterType="java.util.List">
        insert into `autoexec_script_line` (
        `id`,
        `script_id`,
        `script_version_id`,
        `content_hash`,
        `line_number`
        ) values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.id},
            #{item.scriptId},
            #{item.scriptVersionId},
            #{item.contentHash},
            #{item.lineNumber}
            )
        </foreach>
    </insert>

    <insert id="insertScriptLineContent" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptLineContentVo">
        insert ignore into `autoexec_script_line_content` (
        `hash`,
        `content`
        ) values (
        #{hash},
        #{content}
        )
    </insert>

    <delete id="deleteParamByVersionId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_version_param`
        where `script_version_id` = #{value}
    </delete>

    <delete id="deleteScriptLineByVersionId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_line`
        where `script_version_id` = #{value}
    </delete>

</mapper>

