<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright(c) 2021 TechSureCo.,Ltd.AllRightsReserved.
  ~ 本内容仅限于深圳市赞悦科技有限公司内部传阅，禁止外泄以及用于其他的商业项目。
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.module.autoexec.dao.mapper.AutoexecJobMapper">
    <select id="searchJobId" resultType="java.lang.Long">
        SELECT
        distinct aj.`id`
        FROM
        `autoexec_job` aj
        <if test="typeIdList != null and typeIdList.size() > 0 ">
            LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        </if>
        <where>
            <include refid="searchJobSql"/>
        </where>
        order by aj.`id` desc
        limit #{startNum}, #{pageSize}
    </select>

    <select id="searchJob" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT
        aj.`id`,
        aj.`name`,
        aj.`status`,
        aj.`error_msg` as errorMsg,
        aj.`plan_start_time` as planStartTime,
        aj.`start_time` as startTime,
        aj.`end_time` as endTime,
        aj.`operation_id` as operationId,
        aj.`operation_type` as operationType,
        aj.`exec_user` as execUser,
        aj.`exec_user_type` as execUserType,
        aj.`source`,
        aj.`thread_count` as threadCount
        FROM
        `autoexec_job` aj
        WHERE aj.`id` in
        <foreach collection="list" item="jobId" open="(" close=")" separator=",">
            #{jobId}
        </foreach>
        order by aj.`id` desc
    </select>

    <select id="searchJobCount" resultType="java.lang.Integer"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT
        count(distinct aj.`id`)
        FROM
        `autoexec_job` aj
        <if test="typeIdList != null and typeIdList.size() > 0 ">
            LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        </if>
        <where>
            <include refid="searchJobSql"/>
        </where>
    </select>

    <select id="searchJobWithCombopView" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo"
            resultType="codedriver.framework.autoexec.dto.combop.AutoexecCombopVo">
        SELECT ac.`name`, ac.`uk`, COUNT(1) as referenceCount
        FROM `autoexec_job` aj
        LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        <where>
            <include refid="searchJobSql"/>
        </where>
        GROUP BY ac.id
        order by ac.`uk` desc
        limit #{startNum}, #{pageSize}
    </select>

    <sql id="searchJobSql">
        <if test="combopName != null and combopName != ''">
            aj.name like concat('%', #{combopName}, '%')
        </if>
        <if test="keyword != null and keyword != ''">
            and aj.name like concat('%', #{keyword}, '%')
        </if>
        <if test="operationId != null">
            and aj.operation_id = #{operationId}
        </if>
        <if test="statusList != null and statusList.size() > 0 ">
            and aj.`status` in
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        <if test="sourceList != null and sourceList.size() > 0 ">
            and aj.`source` in
            <foreach collection="sourceList" item="source" open="(" close=")" separator=",">
                #{source}
            </foreach>
        </if>
        <if test="typeIdList != null and typeIdList.size() > 0 ">
            and ac.`type_id` in
            <foreach collection="typeIdList" item="typeId" open="(" close=")"
                     separator=",">
                #{typeId}
            </foreach>
        </if>
        <if test="execUserList != null and execUserList.size() > 0 ">
            and aj.`exec_user` in
            <foreach collection="execUserList" item="execUser" open="(" close=")"
                     separator=",">
                #{execUser}
            </foreach>
        </if>
        <if test="startTime != null">
            and aj.start_time >= #{startTime}
        </if>
        <if test="endTime != null "><![CDATA[
               and aj.start_time <= #{endTime}
            ]]></if>
    </sql>

    <sql id="searchJobPhaseNodeSql">
        ajpn.`job_phase_id` = #{jobPhaseId}
        <if test="statusList != null and statusList.size() > 0 ">
            and ajpn.`status` in
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        <if test="keyword != null and keyword != ''">
            an.`name` like concat('%',keyword,'%') or ajpn.`ip` like concat('%',keyword,'%')
        </if>
    </sql>

    <select id="searchJobPhaseNode" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        ajpn.`id`,
        ajpn.`job_phase_id` as jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` as startTime,
        ajpn.`end_time` as endTime,
        ajpn.`status`,
        ajpn.`proxy_id` as proxyId,
        an.`name` AS nodeName,
        ap.`url` AS proxyUrl
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_node` an ON ajpn.`host` = an.`host` AND ajpn.`port` = an.`port`
        LEFT JOIN `autoexec_proxy` ap ON ajpn.`proxy_id` = ap.`id`
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
        limit #{startNum}, #{pageSize}
    </select>

    <select id="searchJobPhaseNodeCount" resultType="java.lang.Integer">
        SELECT
        count(ajpn.`id`)
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_node` an ON ajpn.`host` = an.`host` AND ajpn.`port` = an.`port`
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>

    <select id="getJobPhaseListByJobId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT `id`,
               `job_id`     as jobId,
               `status`,
               `start_time` as startTime,
               `end_time`   as endTime,
               `exec_user`  as execUser,
               `exec_mode` as execMode,
               `name`       as name,
               `uk`         as uk
        FROM `autoexec_job_phase`
        where `job_id` = #{value}
    </select>

    <select id="getJobPhaseNodeStatusCount" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeStatusCountVo">
        SELECT `job_phase_id` as jobPhaseId, `status`, COUNT(1) AS `count`
        FROM `autoexec_job_phase_node`
        WHERE `job_id` = #{value}
        GROUP BY `job_phase_id`, `status`
    </select>

    <select id="getJobInfo" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`error_msg`       as errorMsg,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`source`,
               aj.`thread_count`    as threadCount,
               aj.`param_hash`      as paramHash,
               aj.`config`
        FROM `autoexec_job` aj
        WHERE aj.`id` = #{value}
    </select>

    <select id="checkIsJobUser" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job`
        where `id` = #{jobId}
        and `exec_user` in
        <foreach collection="userList" item="user" open="(" close=")" separator=",">
            #{user}
        </foreach>
    </select>

    <select id="getJobPhaseLockByPhaseId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id as jobId,
               `status`
        FROM `autoexec_job_phase`
        WHERE id = #{value} FOR
        UPDATE
    </select>

    <select id="getJobPhaseLockByJobIdAndPhaseName"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id as jobId,
               `status`
        FROM `autoexec_job_phase`
        WHERE `job_id` = #{jobId}
          and `name` = #{jobPhaseName} FOR
        UPDATE
    </select>

    <select id="getFirstJobPhase" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        select id, job_id as jobId,`name`
        from `autoexec_job_phase`
        where job_id = #{value}
        order by `sort` asc
        limit 1
    </select>

    <resultMap id="jobMap" type="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="paramStr" property="paramStr"/>
        <collection property="phaseList" ofType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
            <id column="phaseId" property="id"/>
            <result column="phaseName" property="name"/>
            <result column="phaseUk" property="uk"/>
            <collection property="operationList"
                        ofType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
                <id column="operationId" property="id"/>
                <result column="operationUk" property="uk"/>
                <result column="operationName" property="name"/>
                <result column="operationType" property="type"/>
                <result column="parser" property="parser"/>
                <result column="execMode" property="execMode"/>
                <result column="failPolicy" property="failPolicy"/>
                <result column="operationParam" property="paramStr"/>
            </collection>
        </collection>
    </resultMap>

    <select id="getJobDetailByJobIdAndPhaseId" parameterType="java.lang.Long" resultMap="jobMap">
        SELECT aj.`id`,
        aj.`name`,
        ajpc.`content` AS paramStr,
        ajp.`id` AS phaseId,
        ajp.`name` AS phaseName,
        ajp.`uk` AS phaseUk,
        ajpo.`id` AS operationId,
        ajpo.`uk` AS operationUk,
        ajpo.`name` AS operationName,
        ajpo.type AS operationType,
        ajpo.parser,
        ajpo.`exec_mode` AS execMode,
        ajpo.`fail_policy` AS failPolicy,
        ajpc1.`content` AS operationParam
        FROM `autoexec_job` aj
        LEFT JOIN `autoexec_job_param_content` ajpc ON aj.`param_hash` = ajpc.`hash`
        LEFT JOIN `autoexec_job_phase` ajp ON aj.`id` = ajp.`job_id`
        LEFT JOIN `autoexec_job_phase_operation` ajpo ON ajp.`id` = ajpo.`job_phase_id`
        LEFT JOIN `autoexec_job_param_content` ajpc1 ON ajpo.`param_hash` = ajpc1.`hash`
        <where>
            aj.`id` = #{jobId}
            <if test="jobPhaseId != null">
                and ajp.`id` = #{jobPhaseId}
            </if>
        </where>
    </select>

    <select id="getJobLockByJobId" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`error_msg`       as errorMsg,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`source`,
               aj.`thread_count`    as threadCount,
               aj.`param_hash`      as paramHash,
               aj.`config`
        FROM `autoexec_job` aj
        WHERE aj.`id` = #{value} for
        update
    </select>

    <select id="getJobParamContentLock"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobParamContentVo">
        SELECT `hash`,
               `content`
        FROM `autoexec_job_param_content`
        where `hash` = #{value} for
        update
    </select>

    <select id="getJobPhaseOperationByJobId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `uk`,
               `type`,
               `parser`,
               `exec_mode`    as execMode,
               `fail_policy`  as failPolicy,
               `param_hash`   as paramHash
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{value}
    </select>

    <select id="checkIsJobParamReference" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job` aj
        WHERE aj.id != #{jobId}
          AND aj.`param_hash` = #{hash}
    </select>

    <select id="checkIsJobPhaseOperationParamReference" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job_phase_operation`
        WHERE job_id != #{jobId}
          AND `param_hash` = #{hash}
    </select>

    <insert id="insertJob" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        INSERT INTO `autoexec_job` (`id`,
        `name`,
        `status`,
        <if test="planStartTime != null and planStartTime !='' ">
            `plan_start_time`,
        </if>
        `operation_id`,
        `operation_type`,
        `thread_count`,
        `param_hash`,
        `exec_user`,
        `exec_user_type`,
        `source`)
        VALUES (#{id},
        #{name},
        #{status},
        <if test="planStartTime != null and planStartTime !='' ">
            #{planStartTime},
        </if>
        #{operationId},
        #{operationType},
        #{threadCount},
        #{paramHash},
        #{execUser},
        #{execUserType},
        #{source});
    </insert>

    <insert id="insertJobPhase" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        INSERT INTO `autoexec_job_phase` (`id`,
                                          `job_id`,
                                          `name`,
                                          `status`,
                                          `exec_user`,
                                          `exec_mode`,
                                          `sort`)
        VALUES (#{id},
                #{jobId},
                #{name},
                #{status},
                #{execUser},
                #{execMode},
                #{sort});
    </insert>

    <insert id="insertJobPhaseNode"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        INSERT INTO `autoexec_job_phase_node` (`id`,
                                               `job_phase_id`,
                                               `host`,
                                               `port`,
                                               `status`,
                                               `proxy_id`)
        VALUES (#{id},
                #{jobPhaseId},
                #{host},
                #{port},
                #{status},
                #{proxyId});
    </insert>

    <insert id="insertJobPhaseOperation"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        INSERT INTO `autoexec_job_phase_operation` (`id`,
                                                    `job_id`,
                                                    `job_phase_id`,
                                                    `uk`,
                                                    `name`,
                                                    `type`,
                                                    `param_hash`)
        VALUES (#{id},
                #{jobId},
                #{jobPhaseId},
                #{uk},
                #{name},
                #{type},
                #{paramHash});
    </insert>

    <insert id="insertJobParamContent"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobParamContentVo">
        INSERT IGNORE INTO `autoexec_job_param_content` (`hash`, `content`)
        VALUES (#{hash}, #{content});
    </insert>

    <update id="updateJobPhaseStatus" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        UPDATE `autoexec_job_phase`
        SET `status` = #{status}
        <if test="status == 'running'">
            ,`start_time` = NOW(3)
        </if>
        <if test="errorMsg != null and errorMsg != ''">
            ,`error_msg` = #{errorMsg}
        </if>
        <if test="status == 'completed' or status == 'failed'">
            ,`end_time` = NOW(3)
        </if>
        WHERE id = #{id}
    </update>

    <update id="updateJobStatus" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        UPDATE `autoexec_job`
        SET `status` = #{status}
        <if test="status == 'running'">
            ,`start_time` = NOW(3)
        </if>
        <if test="errorMsg != null and errorMsg != ''">
            ,`error_msg` = #{errorMsg}
        </if>
        <if test="status == 'completed' or status == 'failed'">
            ,`end_time` = NOW(3)
        </if>
        WHERE id = #{id}
    </update>

    <delete id="deleteJobParamContentByHash" parameterType="java.lang.String">
        DELETE
        FROM `autoexec_job_param_content`
        WHERE `hash` = #{value};
    </delete>

    <delete id="deleteJobUserByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `codedriver_develop`.`autoexec_job_user`
        WHERE `job_id` = #{value}
    </delete>

    <delete id="deleteJobPhaseOperationByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase_operation`
        WHERE `job_id` = #{value}
    </delete>

    <delete id="deleteJobPhaseNodeByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase_node`
        WHERE `job_id` = #{value};
    </delete>

    <delete id="deleteJobPhaseByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase`
        WHERE `job_id` = #{value};
    </delete>

    <delete id="deleteJobByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job`
        WHERE `id` = #{value};
    </delete>


</mapper>

